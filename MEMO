
미로 찾기 게임을 만들자!
안녕, 난 ##에오 어디 시골 대학에서 EEE 전공하고 지금 막 학기를 마쳤조
심심해서 이번에 미로 찾기 게임을 만들어 볼 거에오

마침 운이 좋게 작년에 장난감으로 만든 게임 엔진이 있고
마침 운이 좋게 미로를 만드는 알고리즘을 알고 있으니

미로찾기 멀티플레이어 게임을 만들 거에오
옛날 옛적 모바일 게임 메이즈 킹으로부터 영감을 받았조

최초 구상은 쉬워오
두 사람이 서로의 골에 먼저 도달하면 이기는 1대1 대전 게임! 바로 만들어 봄

그럼 멀티는 어케 할까
방을 만들고, 방에 들어가서 대전 시작.
그럼 메인 메뉴의 버튼: 랜덤 매칭, (나중에: 방 파기, 방 들어가기)

대충 레이아웃을 정하자
- 메인메뉴에 있는거
랜덤닉, 시작, 설정 (오디오, 조작키), 캐 커마

- 게임에 있는거
미로, 플레이 캐릭, 시작 카운트, 
나가기, 


- 매칭 제어
클라가 보내는 거
http/ 내 id 알려조 > 응 id, exp
http/ 나 좀만 더함 > exp extend / ㅗ
http/ 안녕 잘있어 > exp
http/ id인데 방팔래 > 응 room
http/ id인데 room 들어갈래 > 응 room / 없는데?

- 게임 제어
ws/room
type: hi
나 왔어(id) - 방장 어서오고
		- 멤버 어서오고
멤버: 방정보좀 > 
섭: 친구와따(닉, id), 방정보좀 > 방장: 응(닉 id, 미로)
섭: 방장이야 > 멤버: ㄳ, 7초후ㄱ
섭: n초에 ㄱ > 방장: ㅇㅋ

섭: 야 쟤 나갔어 > ㅇㅋㅂㅂ

클라: 경로 갱신, 시작점, 개시시간 > 섭: 쟤는 저깄어
클라: 이긴듯 >
섭: 결과발표 뿌뿌
클라: 십년아 다시떠 > 쟤가 다시하자는디? > ㅇㅋ/ㅗ > 샤따내림



그래서... pre match 는 끝났는데
while gaming 제어 필요
after end 제어
각종 메시지 표시
ui 클린

fuck git.... i regret



테스트를 할 필요가 이따...

테스트 시나리오:
- local 
simulate connection
- remote



헉 움직이는 건 잘된다. 

승리 조건, 리매치, 타임아웃 도입하기 전에, 연결부를 손보고 싶은데...

LocalConfig (LocalConstant) { 
	name
}
HttpClient
SessionHub {
	LocalClient {
		/ id secret /
	}
}
Room & SocketListener {
	SocketClient {
		/ connectionState (was:GameReady) /
		SocketListener
		WebSocket
	}

	LocalState
	RemoteState
	GameHandler {
		/ gaming, synInterval /
		Maze
	}

	onOpen
	onUpdate - ready, join, start
	onGameMsg
	onClose
}

서버 파일도 고치고 싶다,
後

Room {
	/ id /
	momClient
	dadClient
}
Client & SocketHandler {
	/ id secret ip expire /
	Room?
	Connection? {
		/ expire ready lastSync offset ping /
		WebSocket
	}
}


그래도 좀 볼만하게 고친 거는 같은데..
고치고 봐도 또 고치긴 해야할 듯

먼저 끝내야 하는 건: 
end 이벤트 처리, 리매치 처리,
maze 매번 instance 만들지 않아도 되도록 팩토링

필요한 ui 추가
- 공통:
-- 오류 메시지
- 메인:
-- 연결 상태 (과정, 방파기 결과 코드)
-- 설정
- 게임:
-- 나가기
-- 결과창
-- - 리겜
-- - 나가기



